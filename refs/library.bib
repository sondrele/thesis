Automatically generated by Mendeley Desktop 1.13.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Wilson1992,
abstract = {We survey basic garbage collection algorithms, and variations such as incremental and generational collection. The basic algorithms include reference counting, mark-sweep, mark-compact, copying, and treadmill collection. Incremental techniques can keep garbage collection pause times short, by interleaving small amounts of collection work with program execution. Generational schemes improve efficiency and locality by garbage collecting a smaller area more often, while exploiting typical lifetime characteristics to avoid undue overhead from long-lived objects.},
author = {Wilson, Paul R.},
doi = {10.1007/BFb0017182},
file = {:home/sondre/Downloads/thesis/gcsurvey.pdf:pdf},
isbn = {978-3-540-55940-5},
journal = {Memory Management},
number = {September},
pages = {1--42},
title = {{Uniprocessor garbage collection techniques}},
year = {1992}
}
@misc{an0014_timer,
author = {Note, Application},
file = {:home/sondre/Downloads/thesis/an0014\_efm32\_timer.pdf:pdf},
title = {{AN0014 - Application Note}}
}
@article{Grossman2002,
abstract = {Cyclone is a type-safe programming language derived from C. The primary design goal of Cyclone is to let programmers control data representation and memory management without sacrificing type-safety. In this paper, we focus on the region-based memory management of Cyclone and its static typing discipline. The design incorporates several advancements, including support for region subtyping and a coherent integration with stack allocation and a garbage collector. To support separate compilation, Cyclone requires programmers to write some explicit region annotations, but a combination of default annotations, local type inference, and a novel treatment of region effects reduces this burden. As a result, we integrate C idioms in a region-based framework. In our experience, porting legacy C to Cyclone has required altering about 8\% of the code; of the changes, only 6\% (of the 8\%) were region annotations.},
author = {Grossman, Dan and Morrisett, Greg and Jim, Trevor and Hicks, Michael and Wang, Yanling and Cheney, James},
doi = {10.1145/543552.512563},
file = {:home/sondre/Downloads/thesis/cyclone-regions.pdf:pdf},
isbn = {1581134630},
issn = {03621340},
journal = {ACM SIGPLAN Notices},
pages = {282},
title = {{Region-based memory management in cyclone}},
volume = {37},
year = {2002}
}
@article{Swamy2006,
abstract = {The goal of the Cyclone project is to investigate how to make a low-level C-like language safe. Our most difficult challenge has been providing programmers with control over memory management while retaining safety. This paper describes our experience trying to integrate and use effectively two previously-proposed, safe memory-management mechanisms: statically-scoped regions and tracked pointers. We found that these typing mechanisms can be combined to build alternative memory-management abstractions, such as reference counted objects and arenas with dynamic lifetimes, and thus provide a flexible basis. Our experience - porting C programs and device drivers, and building new applications for resource-constrained systems - confirms that experts can use these features to improve memory footprint and sometimes to improve throughput when used instead of, or in combination with, conservative garbage collection. Â© 2006 Elsevier B.V. All rights reserved.},
author = {Swamy, Nikhil and Hicks, Michael and Morrisett, Greg and Grossman, Dan and Jim, Trevor},
doi = {10.1016/j.scico.2006.02.003},
file = {:home/sondre/Downloads/thesis/scp.pdf:pdf},
isbn = {0167-6423},
issn = {01676423},
journal = {Science of Computer Programming},
keywords = {Cyclone,Memory management,Memory safety,Reaps,Reference counting,Regions,Unique pointers},
number = {2},
pages = {122--144},
title = {{Safe manual memory management in Cyclone}},
volume = {62},
year = {2006}
}
